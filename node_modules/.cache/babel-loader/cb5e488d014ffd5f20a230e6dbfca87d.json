{"ast":null,"code":"//\n// The Account object is the primary abstraction to the Conbase API.\n//\n\"use strict\";\n\nvar AccountBase = require('./AccountBase'),\n    handleError = require('../errorHandler').handleError,\n    Address = require('./Address'),\n    Transaction = require('./Transaction'),\n    Buy = require('./Buy'),\n    Sell = require('./Sell'),\n    Deposit = require('./Deposit'),\n    Withdrawal = require('./Withdrawal'),\n    _ = require('lodash'); //\n// ##CONSTRUCTOR\n//\n// _args `client` and `data` are required_\n//\n//```\n// var Account = require('coinbase').model.Account;\n// var myAccount = new Account(client, {'id': 'A1234'});\n//```\n// _normally you will get account instances from `Account` methods on the `Client`\n// but this constructor is useful if you already know the id of the account and\n// wish to reduce calls to the remote API._\n//\n// - - -\n\n\nfunction Account(client, data) {\n  if (!(this instanceof Account)) {\n    return new Account(client, data);\n  }\n\n  AccountBase.call(this, client, data);\n}\n\nAccount.prototype = Object.create(AccountBase.prototype);\n\nAccount.prototype.delete = function (callback) {\n  var path = \"accounts/\" + this.id;\n\n  this.client._deleteHttp(path, callback);\n};\n\nAccount.prototype.setPrimary = function (callback) {\n  var path = \"accounts/\" + this.id + \"/primary\";\n\n  this.client._postHttp(path, null, callback);\n};\n\nAccount.prototype.update = function (args, callback) {\n  var self = this;\n  var path = \"accounts/\" + this.id;\n\n  this.client._putHttp(path, args, function myPut(err, result) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    var account = new Account(self.client, result.data);\n    callback(null, account);\n  });\n}; //```\n// args = {\n//   'id' : account_id\n// };\n\n\nAccount.prototype.getAddresses = function (args, callback) {\n  var opts = {\n    'colName': 'addresses',\n    'ObjFunc': Address\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getAddress = function (addressId, callback) {\n  var opts = {\n    'colName': 'addresses',\n    'ObjFunc': Address,\n    'id': addressId\n  };\n\n  this._getOne(opts, callback);\n}; // ```\n// args = {\n//   'name': address label, (optional)\n//   'callback_url': callback_url (optional)\n// };\n// ```\n\n\nAccount.prototype.createAddress = function (args, callback) {\n  var opts = {\n    'colName': 'addresses',\n    'ObjFunc': Address,\n    'params': args\n  };\n\n  this._postOne(opts, callback);\n};\n\nAccount.prototype.getTransactions = function (args, callback) {\n  var opts = {\n    'colName': 'transactions',\n    'ObjFunc': Transaction\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getTransaction = function (transaction_id, callback) {\n  var opts = {\n    'colName': 'transactions',\n    'ObjFunc': Transaction,\n    'id': transaction_id\n  };\n\n  this._getOne(opts, callback);\n}; //```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\n\n\nAccount.prototype.transferMoney = function (args, callback) {\n  args.type = 'transfer';\n\n  this._initTxn(args, callback);\n}; //```\n// args = {\n//   'to'                 : bitcoin address or email,\n//   'amount'             : amount,\n//   'currency'           : currency,\n//   'description'        : notes,\n//   'skip_notifications' : donâ€™t send notification emails,\n//   'fee'                : transaction fee,\n//   'idem'               : token to ensure idempotence\n// };\n\n\nAccount.prototype.sendMoney = function (args, callback, twoFactorAuth) {\n  var tfa = twoFactorAuth ? {\n    'CB-2FA-Token': twoFactorAuth\n  } : null;\n  args.type = 'send';\n\n  this._initTxn(args, callback, tfa);\n}; //```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\n\n\nAccount.prototype.requestMoney = function (args, callback) {\n  args.type = 'request';\n\n  this._initTxn(args, callback);\n}; // Buys\n\n\nAccount.prototype.getBuys = function (args, callback) {\n  var opts = {\n    'colName': 'buys',\n    'ObjFunc': Buy\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getBuy = function (buy_id, callback) {\n  var opts = {\n    'colName': 'buys',\n    'ObjFunc': Buy,\n    'id': buy_id\n  };\n\n  this._getOne(opts, callback);\n}; //```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\n\n\nAccount.prototype.buy = function (args, callback) {\n  var opts = {\n    'colName': 'buys',\n    'ObjFunc': Buy,\n    'params': args\n  };\n\n  this._postOne(opts, callback);\n}; // Sells\n\n\nAccount.prototype.getSells = function (args, callback) {\n  var opts = {\n    'colName': 'sells',\n    'ObjFunc': Sell\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getSell = function (sell_id, callback) {\n  var opts = {\n    'colName': 'sells',\n    'ObjFunc': Sell,\n    'id': sell_id\n  };\n\n  this._getOne(opts, callback);\n}; //```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\n\n\nAccount.prototype.sell = function (args, callback) {\n  var opts = {\n    'colName': 'sells',\n    'ObjFunc': Sell,\n    'params': args\n  };\n\n  this._postOne(opts, callback);\n}; // Deposits\n\n\nAccount.prototype.getDeposits = function (args, callback) {\n  var opts = {\n    'colName': 'deposits',\n    'ObjFunc': Deposit\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getDeposit = function (deposit_id, callback) {\n  var opts = {\n    'colName': 'deposit',\n    'ObjFunc': Deposit,\n    'id': deposit_id\n  };\n\n  this._getOne(opts, callback);\n}; //```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\n\n\nAccount.prototype.deposit = function (args, callback) {\n  var opts = {\n    'colName': 'deposits',\n    'ObjFunc': Deposit,\n    'params': args\n  };\n\n  this._postOne(opts, callback);\n}; // Withdrawals\n\n\nAccount.prototype.getWithdrawals = function (args, callback) {\n  var opts = {\n    'colName': 'withdrawals',\n    'ObjFunc': Withdrawal\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback);\n};\n\nAccount.prototype.getWithdrawal = function (withdrawal_id, callback) {\n  var opts = {\n    'colName': 'withdrawals',\n    'ObjFunc': Withdrawal,\n    'id': withdrawal_id\n  };\n\n  this._getOne(opts, callback);\n}; //```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\n\n\nAccount.prototype.withdraw = function (args, callback) {\n  var opts = {\n    'colName': 'withdrawals',\n    'ObjFunc': Withdrawal,\n    'params': args\n  };\n\n  this._postOne(opts, callback);\n};\n\nmodule.exports = Account;","map":{"version":3,"sources":["/Users/jaewoochung/Documents/github_repositories/dashboard/node_modules/coinbase/lib/model/Account.js"],"names":["AccountBase","require","handleError","Address","Transaction","Buy","Sell","Deposit","Withdrawal","_","Account","client","data","call","prototype","Object","create","delete","callback","path","id","_deleteHttp","setPrimary","_postHttp","update","args","self","_putHttp","myPut","err","result","account","getAddresses","opts","_getAll","assign","getAddress","addressId","_getOne","createAddress","_postOne","getTransactions","getTransaction","transaction_id","transferMoney","type","_initTxn","sendMoney","twoFactorAuth","tfa","requestMoney","getBuys","getBuy","buy_id","buy","getSells","getSell","sell_id","sell","getDeposits","getDeposit","deposit_id","deposit","getWithdrawals","getWithdrawal","withdrawal_id","withdraw","module","exports"],"mappings":"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","sourcesContent":["//\n// The Account object is the primary abstraction to the Conbase API.\n//\n\"use strict\";\nvar AccountBase = require('./AccountBase'),\n    handleError = require('../errorHandler').handleError,\n    Address     = require('./Address'),\n    Transaction = require('./Transaction'),\n    Buy         = require('./Buy'),\n    Sell        = require('./Sell'),\n    Deposit     = require('./Deposit'),\n    Withdrawal  = require('./Withdrawal'),\n    _           = require('lodash');\n\n//\n// ##CONSTRUCTOR\n//\n// _args `client` and `data` are required_\n//\n//```\n// var Account = require('coinbase').model.Account;\n// var myAccount = new Account(client, {'id': 'A1234'});\n//```\n// _normally you will get account instances from `Account` methods on the `Client`\n// but this constructor is useful if you already know the id of the account and\n// wish to reduce calls to the remote API._\n//\n// - - -\nfunction Account(client, data) {\n  if (!(this instanceof Account)) {\n    return new Account(client, data);\n  }\n  AccountBase.call(this, client, data);\n}\n\nAccount.prototype = Object.create(AccountBase.prototype);\n\nAccount.prototype.delete = function(callback) {\n  var path = \"accounts/\" + this.id;\n  this.client._deleteHttp(path, callback);\n};\n\nAccount.prototype.setPrimary = function(callback) {\n  var path = \"accounts/\" + this.id + \"/primary\";\n  this.client._postHttp(path, null, callback);\n};\n\nAccount.prototype.update = function(args, callback) {\n  var self = this;\n  var path = \"accounts/\" + this.id;\n  this.client._putHttp(path, args, function myPut(err, result) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    var account = new Account(self.client, result.data);\n    callback(null, account);\n  });\n};\n\n//```\n// args = {\n//   'id' : account_id\n// };\nAccount.prototype.getAddresses = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getAddress = function(addressId, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n    'id'       : addressId\n  };\n  this._getOne(opts, callback)\n};\n\n// ```\n// args = {\n//   'name': address label, (optional)\n//   'callback_url': callback_url (optional)\n// };\n// ```\nAccount.prototype.createAddress = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n    'params'   : args\n  };\n  this._postOne(opts, callback)\n};\n\nAccount.prototype.getTransactions = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'transactions',\n    'ObjFunc'  : Transaction,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getTransaction = function(transaction_id, callback) {\n\n  var opts = {\n    'colName' : 'transactions',\n    'ObjFunc' : Transaction,\n    'id'      : transaction_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n//```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\n\nAccount.prototype.transferMoney = function(args, callback) {\n  args.type = 'transfer';\n  this._initTxn(args, callback);\n};\n\n//```\n// args = {\n//   'to'                 : bitcoin address or email,\n//   'amount'             : amount,\n//   'currency'           : currency,\n//   'description'        : notes,\n//   'skip_notifications' : donâ€™t send notification emails,\n//   'fee'                : transaction fee,\n//   'idem'               : token to ensure idempotence\n// };\nAccount.prototype.sendMoney = function(args, callback, twoFactorAuth) {\n\n  var tfa = twoFactorAuth ? {'CB-2FA-Token': twoFactorAuth} : null;\n  args.type = 'send';\n\n  this._initTxn(args, callback, tfa);\n};\n\n//```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\nAccount.prototype.requestMoney = function(args, callback) {\n  args.type = 'request';\n  this._initTxn(args, callback);\n};\n\n// Buys\nAccount.prototype.getBuys = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getBuy = function(buy_id, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n    'id'       : buy_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\nAccount.prototype.buy = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Sells\nAccount.prototype.getSells = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getSell = function(sell_id, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n    'id'       : sell_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\nAccount.prototype.sell = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Deposits\nAccount.prototype.getDeposits = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'deposits',\n    'ObjFunc'  : Deposit,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getDeposit = function(deposit_id, callback) {\n\n  var opts = {\n    'colName'  : 'deposit',\n    'ObjFunc'  : Deposit,\n    'id'       : deposit_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\nAccount.prototype.deposit = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'deposits',\n    'ObjFunc'  : Deposit,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Withdrawals\nAccount.prototype.getWithdrawals = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getWithdrawal = function(withdrawal_id, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n    'id'       : withdrawal_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\nAccount.prototype.withdraw = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\nmodule.exports = Account;\n"]},"metadata":{},"sourceType":"script"}