{"ast":null,"code":"\"use strict\";\n\nvar BaseModel = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError; //##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Transaction = require('coinbase').model.Transaction;\n// var myTxn = new Transaction(client, data, account);\n//```\n// _normally you will get transactions from `Transaction` methods on the Account\n// or methods on existing instance of `Transaction`_\n// - - -\n\n\nfunction Transaction(client, data, account) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(client, data, account);\n  }\n\n  BaseModel.call(this, client, data);\n\n  if (!account) {\n    throw new Error(\"no account arg\");\n  }\n\n  if (!account.id) {\n    throw new Error(\"account has no id\");\n  }\n\n  this.account = account;\n}\n\nTransaction.prototype = Object.create(BaseModel.prototype);\n\nTransaction.prototype.resend = function (callback) {\n  var self = this;\n\n  if (self.type !== 'request') {\n    throw \"Can only resend 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id + '/transactions/' + self.id + '/resend';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nTransaction.prototype.complete = function (callback) {\n  var self = this;\n\n  if (self.type !== 'request') {\n    throw \"Can only complete 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id + '/transactions/' + self.id + '/complete';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, new Transaction(self.client, result.data, self.account));\n    }\n  });\n};\n\nTransaction.prototype.cancel = function (callback) {\n  var self = this;\n\n  if (self.type !== 'request') {\n    throw \"Can only cancel 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id + '/transactions/' + self.id;\n\n  self.client._deleteHttp(path, function onDel(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["/Users/jaewoochung/Documents/github_repositories/dashboard/node_modules/coinbase/lib/model/Transaction.js"],"names":["BaseModel","require","handleError","Transaction","client","data","account","call","Error","id","prototype","Object","create","resend","callback","self","type","path","_postHttp","onPut","err","result","complete","cancel","_deleteHttp","onDel","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Transaction = require('coinbase').model.Transaction;\n// var myTxn = new Transaction(client, data, account);\n//```\n// _normally you will get transactions from `Transaction` methods on the Account\n// or methods on existing instance of `Transaction`_\n// - - -\nfunction Transaction(client, data, account) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(client, data, account);\n  }\n  BaseModel.call(this, client, data);\n  if (!account) { throw new Error(\"no account arg\"); }\n  if (!account.id) { throw new Error(\"account has no id\"); }\n  this.account = account;\n}\n\nTransaction.prototype = Object.create(BaseModel.prototype);\n\nTransaction.prototype.resend = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only resend 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id + '/resend';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nTransaction.prototype.complete = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only complete 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id + '/complete';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, new Transaction(self.client, result.data, self.account));\n    }\n  });\n};\n\nTransaction.prototype.cancel = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only cancel 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id;\n\n  self.client._deleteHttp(path, function onDel(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nmodule.exports = Transaction;\n\n"]},"metadata":{},"sourceType":"script"}