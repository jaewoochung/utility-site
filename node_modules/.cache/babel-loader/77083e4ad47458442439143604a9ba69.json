{"ast":null,"code":"'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  _traverse(opts, cb, schema, '', schema);\n};\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true\n};\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\ntraverse.propsKeywords = {\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\ntraverse.skipKeywords = {\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\nfunction _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n\n    for (var key in schema) {\n      var sch = schema[key];\n\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i = 0; i < sch.length; i++) _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch) _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {\n        _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n  }\n}\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}","map":{"version":3,"sources":["/Users/jaewoochung/Documents/github_repositories/dashboard/node_modules/har-validator/node_modules/json-schema-traverse/index.js"],"names":["traverse","module","exports","schema","opts","cb","_traverse","keywords","additionalItems","items","contains","additionalProperties","propertyNames","not","arrayKeywords","allOf","anyOf","oneOf","propsKeywords","definitions","properties","patternProperties","dependencies","skipKeywords","enum","const","required","maximum","minimum","exclusiveMaximum","exclusiveMinimum","multipleOf","maxLength","minLength","pattern","format","maxItems","minItems","uniqueItems","maxProperties","minProperties","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","Array","isArray","key","sch","i","length","prop","escapeJsonPtr","allKeys","str","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n  _traverse(opts, cb, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n"]},"metadata":{},"sourceType":"script"}