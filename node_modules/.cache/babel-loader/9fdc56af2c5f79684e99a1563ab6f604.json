{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate_properties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n      $idx = 'idx' + $lvl,\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $dataProperties = 'dataProperties' + $lvl;\n  var $schemaKeys = Object.keys($schema || {}),\n      $pProperties = it.schema.patternProperties || {},\n      $pPropertyKeys = Object.keys($pProperties),\n      $aProperties = it.schema.additionalProperties,\n      $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n      $noAdditional = $aProperties === false,\n      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n      $removeAdditional = it.opts.removeAdditional,\n      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n      $ownProperties = it.opts.ownProperties,\n      $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n\n  if (it.opts.patternGroups) {\n    var $pgProperties = it.schema.patternGroups || {},\n        $pgPropertyKeys = Object.keys($pgProperties);\n  }\n\n  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';\n\n  if ($ownProperties) {\n    out += ' var ' + $dataProperties + ' = undefined;';\n  }\n\n  if ($checkAdditional) {\n    if ($ownProperties) {\n      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n    } else {\n      out += ' for (var ' + $key + ' in ' + $data + ') { ';\n    }\n\n    if ($someProperties) {\n      out += ' var isAdditional' + $lvl + ' = !(false ';\n\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 5) {\n          out += ' || validate.schema' + $schemaPath + '[' + $key + '] ';\n        } else {\n          var arr1 = $schemaKeys;\n\n          if (arr1) {\n            var $propertyKey,\n                i1 = -1,\n                l1 = arr1.length - 1;\n\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';\n            }\n          }\n        }\n      }\n\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n\n        if (arr2) {\n          var $pProperty,\n              $i = -1,\n              l2 = arr2.length - 1;\n\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';\n          }\n        }\n      }\n\n      if (it.opts.patternGroups && $pgPropertyKeys.length) {\n        var arr3 = $pgPropertyKeys;\n\n        if (arr3) {\n          var $pgProperty,\n              $i = -1,\n              l3 = arr3.length - 1;\n\n          while ($i < l3) {\n            $pgProperty = arr3[$i += 1];\n            out += ' || ' + it.usePattern($pgProperty) + '.test(' + $key + ') ';\n          }\n        }\n      }\n\n      out += ' ); if (isAdditional' + $lvl + ') { ';\n    }\n\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + $data + '[' + $key + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + $data + '[' + $key + ']; ';\n        } else {\n          out += ' ' + $nextValid + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = '';\n          /* istanbul ignore else */\n\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + 'additionalProperties' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \\'' + $additionalProperty + '\\' } ';\n\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'should NOT have additional properties\\' ';\n            }\n\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n            }\n\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n\n          var __err = out;\n          out = $$outStack.pop();\n\n          if (!it.compositeRule && $breakOnError) {\n            /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + __err + ']); ';\n            } else {\n              out += ' validate.errors = [' + __err + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n\n          $errSchemaPath = $currErrSchemaPath;\n\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + $errs + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n        }\n      }\n\n      it.errorPath = $currentErrorPath;\n    }\n\n    if ($someProperties) {\n      out += ' } ';\n    }\n\n    out += ' }  ';\n\n    if ($breakOnError) {\n      out += ' if (' + $nextValid + ') { ';\n      $closingBraces += '}';\n    }\n  }\n\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n\n  if ($schemaKeys.length) {\n    var arr4 = $schemaKeys;\n\n    if (arr4) {\n      var $propertyKey,\n          i4 = -1,\n          l4 = arr4.length - 1;\n\n      while (i4 < l4) {\n        $propertyKey = arr4[i4 += 1];\n        var $sch = $schema[$propertyKey];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n              $passData = $data + $prop,\n              $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + $nextData + ' = ' + $passData + '; ';\n          }\n\n          if ($hasDefault) {\n            out += ' ' + $code + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if ( ' + $useData + ' === undefined ';\n\n              if ($ownProperties) {\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n              }\n\n              out += ') { ' + $nextValid + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                  $currErrSchemaPath = $errSchemaPath,\n                  $missingProperty = it.util.escapeQuotes($propertyKey);\n\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + 'required' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n                  }\n\n                  out += '\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if ( ' + $useData + ' === undefined ';\n\n                if ($ownProperties) {\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n                }\n\n                out += ') { ' + $nextValid + ' = true; } else { ';\n              } else {\n                out += ' if (' + $useData + ' !== undefined ';\n\n                if ($ownProperties) {\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', \\'' + it.util.escapeQuotes($propertyKey) + '\\') ';\n                }\n\n                out += ' ) { ';\n              }\n            }\n\n            out += ' ' + $code + ' } ';\n          }\n        }\n\n        if ($breakOnError) {\n          out += ' if (' + $nextValid + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n\n  if ($pPropertyKeys.length) {\n    var arr5 = $pPropertyKeys;\n\n    if (arr5) {\n      var $pProperty,\n          i5 = -1,\n          l5 = arr5.length - 1;\n\n      while (i5 < l5) {\n        $pProperty = arr5[i5 += 1];\n        var $sch = $pProperties[$pProperty];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n\n          if ($ownProperties) {\n            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n          } else {\n            out += ' for (var ' + $key + ' in ' + $data + ') { ';\n          }\n\n          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n\n          out += ' } ';\n\n          if ($breakOnError) {\n            out += ' else ' + $nextValid + ' = true; ';\n          }\n\n          out += ' }  ';\n\n          if ($breakOnError) {\n            out += ' if (' + $nextValid + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n  }\n\n  if (it.opts.patternGroups && $pgPropertyKeys.length) {\n    var arr6 = $pgPropertyKeys;\n\n    if (arr6) {\n      var $pgProperty,\n          i6 = -1,\n          l6 = arr6.length - 1;\n\n      while (i6 < l6) {\n        $pgProperty = arr6[i6 += 1];\n        var $pgSchema = $pgProperties[$pgProperty],\n            $sch = $pgSchema.schema;\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';\n          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';\n          out += ' var pgPropCount' + $lvl + ' = 0;  ';\n\n          if ($ownProperties) {\n            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';\n          } else {\n            out += ' for (var ' + $key + ' in ' + $data + ') { ';\n          }\n\n          out += ' if (' + it.usePattern($pgProperty) + '.test(' + $key + ')) { pgPropCount' + $lvl + '++; ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n\n          out += ' } ';\n\n          if ($breakOnError) {\n            out += ' else ' + $nextValid + ' = true; ';\n          }\n\n          out += ' }  ';\n\n          if ($breakOnError) {\n            out += ' if (' + $nextValid + ') { ';\n            $closingBraces += '}';\n          }\n\n          var $pgMin = $pgSchema.minimum,\n              $pgMax = $pgSchema.maximum;\n\n          if ($pgMin !== undefined || $pgMax !== undefined) {\n            out += ' var ' + $valid + ' = true; ';\n            var $currErrSchemaPath = $errSchemaPath;\n\n            if ($pgMin !== undefined) {\n              var $limit = $pgMin,\n                  $reason = 'minimum',\n                  $moreOrLess = 'less';\n              out += ' ' + $valid + ' = pgPropCount' + $lvl + ' >= ' + $pgMin + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';\n              out += '  if (!' + $valid + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + 'patternGroups' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \\'' + $reason + '\\', limit: ' + $limit + ', pattern: \\'' + it.util.escapeQuotes($pgProperty) + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern \"' + it.util.escapeQuotes($pgProperty) + '\"\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              out += ' } ';\n\n              if ($pgMax !== undefined) {\n                out += ' else ';\n              }\n            }\n\n            if ($pgMax !== undefined) {\n              var $limit = $pgMax,\n                  $reason = 'maximum',\n                  $moreOrLess = 'more';\n              out += ' ' + $valid + ' = pgPropCount' + $lvl + ' <= ' + $pgMax + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';\n              out += '  if (!' + $valid + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + 'patternGroups' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \\'' + $reason + '\\', limit: ' + $limit + ', pattern: \\'' + it.util.escapeQuotes($pgProperty) + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern \"' + it.util.escapeQuotes($pgProperty) + '\"\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              out += ' } ';\n            }\n\n            $errSchemaPath = $currErrSchemaPath;\n\n            if ($breakOnError) {\n              out += ' if (' + $valid + ') { ';\n              $closingBraces += '}';\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};","map":{"version":3,"sources":["/Users/jaewoochung/Documents/github_repositories/dashboard/node_modules/har-validator/node_modules/ajv/lib/dotjs/properties.js"],"names":["module","exports","generate_properties","it","$keyword","$ruleType","out","$lvl","level","$dataLvl","dataLevel","$schema","schema","$schemaPath","schemaPath","util","getProperty","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$data","$valid","$errs","$it","copy","$closingBraces","$nextValid","$key","$idx","$dataNxt","$nextData","$dataProperties","$schemaKeys","Object","keys","$pProperties","patternProperties","$pPropertyKeys","$aProperties","additionalProperties","$someProperties","length","$noAdditional","$additionalIsSchema","$removeAdditional","removeAdditional","$checkAdditional","$ownProperties","ownProperties","$currentBaseId","baseId","$required","required","v5","loopRequired","$requiredHash","toHash","patternGroups","$pgProperties","$pgPropertyKeys","arr1","$propertyKey","i1","l1","toQuotedString","arr2","$pProperty","$i","l2","usePattern","arr3","$pgProperty","l3","$currentErrorPath","errorPath","$additionalProperty","_errorDataPathProperty","getPathExpr","jsonPointers","$currErrSchemaPath","$$outStack","push","createErrors","messages","verbose","__err","pop","compositeRule","async","$wasComposite","$passData","dataPathArr","$code","validate","varOccurences","varReplace","$useDefaults","useDefaults","arr4","i4","l4","$sch","schemaHasRules","RULES","all","$prop","$hasDefault","default","undefined","escapeFragment","getPath","$useData","escapeQuotes","$missingProperty","arr5","i5","l5","arr6","i6","l6","$pgSchema","$pgMin","minimum","$pgMax","maximum","$limit","$reason","$moreOrLess","cleanUpCode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,EAA7B,EAAiCC,QAAjC,EAA2CC,SAA3C,EAAsD;AACrE,MAAIC,GAAG,GAAG,GAAV;AACA,MAAIC,IAAI,GAAGJ,EAAE,CAACK,KAAd;AACA,MAAIC,QAAQ,GAAGN,EAAE,CAACO,SAAlB;AACA,MAAIC,OAAO,GAAGR,EAAE,CAACS,MAAH,CAAUR,QAAV,CAAd;AACA,MAAIS,WAAW,GAAGV,EAAE,CAACW,UAAH,GAAgBX,EAAE,CAACY,IAAH,CAAQC,WAAR,CAAoBZ,QAApB,CAAlC;AACA,MAAIa,cAAc,GAAGd,EAAE,CAACe,aAAH,GAAmB,GAAnB,GAAyBd,QAA9C;AACA,MAAIe,aAAa,GAAG,CAAChB,EAAE,CAACiB,IAAH,CAAQC,SAA7B;AACA,MAAIC,KAAK,GAAG,UAAUb,QAAQ,IAAI,EAAtB,CAAZ;AACA,MAAIc,MAAM,GAAG,UAAUhB,IAAvB;AACA,MAAIiB,KAAK,GAAG,WAAWjB,IAAvB;AACA,MAAIkB,GAAG,GAAGtB,EAAE,CAACY,IAAH,CAAQW,IAAR,CAAavB,EAAb,CAAV;AACA,MAAIwB,cAAc,GAAG,EAArB;AACAF,EAAAA,GAAG,CAACjB,KAAJ;AACA,MAAIoB,UAAU,GAAG,UAAUH,GAAG,CAACjB,KAA/B;AACA,MAAIqB,IAAI,GAAG,QAAQtB,IAAnB;AAAA,MACEuB,IAAI,GAAG,QAAQvB,IADjB;AAAA,MAEEwB,QAAQ,GAAGN,GAAG,CAACf,SAAJ,GAAgBP,EAAE,CAACO,SAAH,GAAe,CAF5C;AAAA,MAGEsB,SAAS,GAAG,SAASD,QAHvB;AAAA,MAIEE,eAAe,GAAG,mBAAmB1B,IAJvC;AAKA,MAAI2B,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYzB,OAAO,IAAI,EAAvB,CAAlB;AAAA,MACE0B,YAAY,GAAGlC,EAAE,CAACS,MAAH,CAAU0B,iBAAV,IAA+B,EADhD;AAAA,MAEEC,cAAc,GAAGJ,MAAM,CAACC,IAAP,CAAYC,YAAZ,CAFnB;AAAA,MAGEG,YAAY,GAAGrC,EAAE,CAACS,MAAH,CAAU6B,oBAH3B;AAAA,MAIEC,eAAe,GAAGR,WAAW,CAACS,MAAZ,IAAsBJ,cAAc,CAACI,MAJzD;AAAA,MAKEC,aAAa,GAAGJ,YAAY,KAAK,KALnC;AAAA,MAMEK,mBAAmB,GAAG,OAAOL,YAAP,IAAuB,QAAvB,IAAmCL,MAAM,CAACC,IAAP,CAAYI,YAAZ,EAA0BG,MANrF;AAAA,MAOEG,iBAAiB,GAAG3C,EAAE,CAACiB,IAAH,CAAQ2B,gBAP9B;AAAA,MAQEC,gBAAgB,GAAGJ,aAAa,IAAIC,mBAAjB,IAAwCC,iBAR7D;AAAA,MASEG,cAAc,GAAG9C,EAAE,CAACiB,IAAH,CAAQ8B,aAT3B;AAAA,MAUEC,cAAc,GAAGhD,EAAE,CAACiD,MAVtB;AAWA,MAAIC,SAAS,GAAGlD,EAAE,CAACS,MAAH,CAAU0C,QAA1B;AACA,MAAID,SAAS,IAAI,EAAElD,EAAE,CAACiB,IAAH,CAAQmC,EAAR,IAAcF,SAAS,CAAC/B,KAA1B,CAAb,IAAiD+B,SAAS,CAACV,MAAV,GAAmBxC,EAAE,CAACiB,IAAH,CAAQoC,YAAhF,EAA8F,IAAIC,aAAa,GAAGtD,EAAE,CAACY,IAAH,CAAQ2C,MAAR,CAAeL,SAAf,CAApB;;AAC9F,MAAIlD,EAAE,CAACiB,IAAH,CAAQuC,aAAZ,EAA2B;AACzB,QAAIC,aAAa,GAAGzD,EAAE,CAACS,MAAH,CAAU+C,aAAV,IAA2B,EAA/C;AAAA,QACEE,eAAe,GAAG1B,MAAM,CAACC,IAAP,CAAYwB,aAAZ,CADpB;AAED;;AACDtD,EAAAA,GAAG,IAAI,SAAUkB,KAAV,GAAmB,gBAAnB,GAAuCI,UAAvC,GAAqD,UAA5D;;AACA,MAAIqB,cAAJ,EAAoB;AAClB3C,IAAAA,GAAG,IAAI,UAAW2B,eAAX,GAA8B,eAArC;AACD;;AACD,MAAIe,gBAAJ,EAAsB;AACpB,QAAIC,cAAJ,EAAoB;AAClB3C,MAAAA,GAAG,IAAI,MAAO2B,eAAP,GAA0B,KAA1B,GAAmCA,eAAnC,GAAsD,kBAAtD,GAA4EX,KAA5E,GAAqF,cAArF,GAAuGQ,IAAvG,GAA+G,MAA/G,GAAyHA,IAAzH,GAAiI,GAAjI,GAAwIG,eAAxI,GAA2J,WAA3J,GAA0KH,IAA1K,GAAkL,YAAlL,GAAkMD,IAAlM,GAA0M,KAA1M,GAAmNI,eAAnN,GAAsO,GAAtO,GAA6OH,IAA7O,GAAqP,KAA5P;AACD,KAFD,MAEO;AACLxB,MAAAA,GAAG,IAAI,eAAgBuB,IAAhB,GAAwB,MAAxB,GAAkCP,KAAlC,GAA2C,MAAlD;AACD;;AACD,QAAIoB,eAAJ,EAAqB;AACnBpC,MAAAA,GAAG,IAAI,sBAAuBC,IAAvB,GAA+B,aAAtC;;AACA,UAAI2B,WAAW,CAACS,MAAhB,EAAwB;AACtB,YAAIT,WAAW,CAACS,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BrC,UAAAA,GAAG,IAAI,wBAAyBO,WAAzB,GAAwC,GAAxC,GAA+CgB,IAA/C,GAAuD,IAA9D;AACD,SAFD,MAEO;AACL,cAAIiC,IAAI,GAAG5B,WAAX;;AACA,cAAI4B,IAAJ,EAAU;AACR,gBAAIC,YAAJ;AAAA,gBAAkBC,EAAE,GAAG,CAAC,CAAxB;AAAA,gBACEC,EAAE,GAAGH,IAAI,CAACnB,MAAL,GAAc,CADrB;;AAEA,mBAAOqB,EAAE,GAAGC,EAAZ,EAAgB;AACdF,cAAAA,YAAY,GAAGD,IAAI,CAACE,EAAE,IAAI,CAAP,CAAnB;AACA1D,cAAAA,GAAG,IAAI,SAAUuB,IAAV,GAAkB,MAAlB,GAA4B1B,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBH,YAAvB,CAA5B,GAAoE,GAA3E;AACD;AACF;AACF;AACF;;AACD,UAAIxB,cAAc,CAACI,MAAnB,EAA2B;AACzB,YAAIwB,IAAI,GAAG5B,cAAX;;AACA,YAAI4B,IAAJ,EAAU;AACR,cAAIC,UAAJ;AAAA,cAAgBC,EAAE,GAAG,CAAC,CAAtB;AAAA,cACEC,EAAE,GAAGH,IAAI,CAACxB,MAAL,GAAc,CADrB;;AAEA,iBAAO0B,EAAE,GAAGC,EAAZ,EAAgB;AACdF,YAAAA,UAAU,GAAGD,IAAI,CAACE,EAAE,IAAI,CAAP,CAAjB;AACA/D,YAAAA,GAAG,IAAI,SAAUH,EAAE,CAACoE,UAAH,CAAcH,UAAd,CAAV,GAAuC,QAAvC,GAAmDvC,IAAnD,GAA2D,IAAlE;AACD;AACF;AACF;;AACD,UAAI1B,EAAE,CAACiB,IAAH,CAAQuC,aAAR,IAAyBE,eAAe,CAAClB,MAA7C,EAAqD;AACnD,YAAI6B,IAAI,GAAGX,eAAX;;AACA,YAAIW,IAAJ,EAAU;AACR,cAAIC,WAAJ;AAAA,cAAiBJ,EAAE,GAAG,CAAC,CAAvB;AAAA,cACEK,EAAE,GAAGF,IAAI,CAAC7B,MAAL,GAAc,CADrB;;AAEA,iBAAO0B,EAAE,GAAGK,EAAZ,EAAgB;AACdD,YAAAA,WAAW,GAAGD,IAAI,CAACH,EAAE,IAAI,CAAP,CAAlB;AACA/D,YAAAA,GAAG,IAAI,SAAUH,EAAE,CAACoE,UAAH,CAAcE,WAAd,CAAV,GAAwC,QAAxC,GAAoD5C,IAApD,GAA4D,IAAnE;AACD;AACF;AACF;;AACDvB,MAAAA,GAAG,IAAI,yBAA0BC,IAA1B,GAAkC,MAAzC;AACD;;AACD,QAAIuC,iBAAiB,IAAI,KAAzB,EAAgC;AAC9BxC,MAAAA,GAAG,IAAI,aAAcgB,KAAd,GAAuB,GAAvB,GAA8BO,IAA9B,GAAsC,KAA7C;AACD,KAFD,MAEO;AACL,UAAI8C,iBAAiB,GAAGxE,EAAE,CAACyE,SAA3B;AACA,UAAIC,mBAAmB,GAAG,UAAUhD,IAAV,GAAiB,OAA3C;;AACA,UAAI1B,EAAE,CAACiB,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClC3E,QAAAA,EAAE,CAACyE,SAAH,GAAezE,EAAE,CAACY,IAAH,CAAQgE,WAAR,CAAoB5E,EAAE,CAACyE,SAAvB,EAAkC/C,IAAlC,EAAwC1B,EAAE,CAACiB,IAAH,CAAQ4D,YAAhD,CAAf;AACD;;AACD,UAAIpC,aAAJ,EAAmB;AACjB,YAAIE,iBAAJ,EAAuB;AACrBxC,UAAAA,GAAG,IAAI,aAAcgB,KAAd,GAAuB,GAAvB,GAA8BO,IAA9B,GAAsC,KAA7C;AACD,SAFD,MAEO;AACLvB,UAAAA,GAAG,IAAI,MAAOsB,UAAP,GAAqB,YAA5B;AACA,cAAIqD,kBAAkB,GAAGhE,cAAzB;AACAA,UAAAA,cAAc,GAAGd,EAAE,CAACe,aAAH,GAAmB,uBAApC;AACA,cAAIgE,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,UAAAA,UAAU,CAACC,IAAX,CAAgB7E,GAAhB;AACAA,UAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,cAAIH,EAAE,CAACiF,YAAH,KAAoB,KAAxB,EAA+B;AAC7B9E,YAAAA,GAAG,IAAI,mBAAoB,sBAApB,GAA8C,sCAA9C,GAAwFH,EAAE,CAACyE,SAA3F,GAAwG,iBAAxG,GAA6HzE,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBjD,cAAvB,CAA7H,GAAuK,qCAAvK,GAAgN4D,mBAAhN,GAAuO,OAA9O;;AACA,gBAAI1E,EAAE,CAACiB,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B/E,cAAAA,GAAG,IAAI,wDAAP;AACD;;AACD,gBAAIH,EAAE,CAACiB,IAAH,CAAQkE,OAAZ,EAAqB;AACnBhF,cAAAA,GAAG,IAAI,qDAAsDH,EAAE,CAACW,UAAzD,GAAuE,WAAvE,GAAsFQ,KAAtF,GAA+F,GAAtG;AACD;;AACDhB,YAAAA,GAAG,IAAI,KAAP;AACD,WATD,MASO;AACLA,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD,cAAIiF,KAAK,GAAGjF,GAAZ;AACAA,UAAAA,GAAG,GAAG4E,UAAU,CAACM,GAAX,EAAN;;AACA,cAAI,CAACrF,EAAE,CAACsF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,gBAAIhB,EAAE,CAACuF,KAAP,EAAc;AACZpF,cAAAA,GAAG,IAAI,iCAAkCiF,KAAlC,GAA2C,MAAlD;AACD,aAFD,MAEO;AACLjF,cAAAA,GAAG,IAAI,yBAA0BiF,KAA1B,GAAmC,mBAA1C;AACD;AACF,WAND,MAMO;AACLjF,YAAAA,GAAG,IAAI,gBAAiBiF,KAAjB,GAA0B,8EAAjC;AACD;;AACDtE,UAAAA,cAAc,GAAGgE,kBAAjB;;AACA,cAAI9D,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,UAAP;AACD;AACF;AACF,OAtCD,MAsCO,IAAIuC,mBAAJ,EAAyB;AAC9B,YAAIC,iBAAiB,IAAI,SAAzB,EAAoC;AAClCxC,UAAAA,GAAG,IAAI,UAAWkB,KAAX,GAAoB,cAA3B;AACA,cAAImE,aAAa,GAAGxF,EAAE,CAACsF,aAAvB;AACAtF,UAAAA,EAAE,CAACsF,aAAH,GAAmBhE,GAAG,CAACgE,aAAJ,GAAoB,IAAvC;AACAhE,UAAAA,GAAG,CAACb,MAAJ,GAAa4B,YAAb;AACAf,UAAAA,GAAG,CAACX,UAAJ,GAAiBX,EAAE,CAACW,UAAH,GAAgB,uBAAjC;AACAW,UAAAA,GAAG,CAACP,aAAJ,GAAoBf,EAAE,CAACe,aAAH,GAAmB,uBAAvC;AACAO,UAAAA,GAAG,CAACmD,SAAJ,GAAgBzE,EAAE,CAACiB,IAAH,CAAQ0D,sBAAR,GAAiC3E,EAAE,CAACyE,SAApC,GAAgDzE,EAAE,CAACY,IAAH,CAAQgE,WAAR,CAAoB5E,EAAE,CAACyE,SAAvB,EAAkC/C,IAAlC,EAAwC1B,EAAE,CAACiB,IAAH,CAAQ4D,YAAhD,CAAhE;AACA,cAAIY,SAAS,GAAGtE,KAAK,GAAG,GAAR,GAAcO,IAAd,GAAqB,GAArC;AACAJ,UAAAA,GAAG,CAACoE,WAAJ,CAAgB9D,QAAhB,IAA4BF,IAA5B;AACA,cAAIiE,KAAK,GAAG3F,EAAE,CAAC4F,QAAH,CAAYtE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC2B,MAAJ,GAAaD,cAAb;;AACA,cAAIhD,EAAE,CAACY,IAAH,CAAQiF,aAAR,CAAsBF,KAAtB,EAA6B9D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C1B,YAAAA,GAAG,IAAI,MAAOH,EAAE,CAACY,IAAH,CAAQkF,UAAR,CAAmBH,KAAnB,EAA0B9D,SAA1B,EAAqC4D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLtF,YAAAA,GAAG,IAAI,UAAW0B,SAAX,GAAwB,KAAxB,GAAiC4D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACDxF,UAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,eAA1B,GAA6CJ,KAA7C,GAAsD,uHAAtD,GAAiLF,KAAjL,GAA0L,GAA1L,GAAiMO,IAAjM,GAAyM,QAAhN;AACA1B,UAAAA,EAAE,CAACsF,aAAH,GAAmBhE,GAAG,CAACgE,aAAJ,GAAoBE,aAAvC;AACD,SAnBD,MAmBO;AACLlE,UAAAA,GAAG,CAACb,MAAJ,GAAa4B,YAAb;AACAf,UAAAA,GAAG,CAACX,UAAJ,GAAiBX,EAAE,CAACW,UAAH,GAAgB,uBAAjC;AACAW,UAAAA,GAAG,CAACP,aAAJ,GAAoBf,EAAE,CAACe,aAAH,GAAmB,uBAAvC;AACAO,UAAAA,GAAG,CAACmD,SAAJ,GAAgBzE,EAAE,CAACiB,IAAH,CAAQ0D,sBAAR,GAAiC3E,EAAE,CAACyE,SAApC,GAAgDzE,EAAE,CAACY,IAAH,CAAQgE,WAAR,CAAoB5E,EAAE,CAACyE,SAAvB,EAAkC/C,IAAlC,EAAwC1B,EAAE,CAACiB,IAAH,CAAQ4D,YAAhD,CAAhE;AACA,cAAIY,SAAS,GAAGtE,KAAK,GAAG,GAAR,GAAcO,IAAd,GAAqB,GAArC;AACAJ,UAAAA,GAAG,CAACoE,WAAJ,CAAgB9D,QAAhB,IAA4BF,IAA5B;AACA,cAAIiE,KAAK,GAAG3F,EAAE,CAAC4F,QAAH,CAAYtE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC2B,MAAJ,GAAaD,cAAb;;AACA,cAAIhD,EAAE,CAACY,IAAH,CAAQiF,aAAR,CAAsBF,KAAtB,EAA6B9D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C1B,YAAAA,GAAG,IAAI,MAAOH,EAAE,CAACY,IAAH,CAAQkF,UAAR,CAAmBH,KAAnB,EAA0B9D,SAA1B,EAAqC4D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLtF,YAAAA,GAAG,IAAI,UAAW0B,SAAX,GAAwB,KAAxB,GAAiC4D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,cAAI3E,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;AACF;AACF;;AACDzB,MAAAA,EAAE,CAACyE,SAAH,GAAeD,iBAAf;AACD;;AACD,QAAIjC,eAAJ,EAAqB;AACnBpC,MAAAA,GAAG,IAAI,KAAP;AACD;;AACDA,IAAAA,GAAG,IAAI,MAAP;;AACA,QAAIa,aAAJ,EAAmB;AACjBb,MAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,MAAAA,cAAc,IAAI,GAAlB;AACD;AACF;;AACD,MAAIuE,YAAY,GAAG/F,EAAE,CAACiB,IAAH,CAAQ+E,WAAR,IAAuB,CAAChG,EAAE,CAACsF,aAA9C;;AACA,MAAIvD,WAAW,CAACS,MAAhB,EAAwB;AACtB,QAAIyD,IAAI,GAAGlE,WAAX;;AACA,QAAIkE,IAAJ,EAAU;AACR,UAAIrC,YAAJ;AAAA,UAAkBsC,EAAE,GAAG,CAAC,CAAxB;AAAA,UACEC,EAAE,GAAGF,IAAI,CAACzD,MAAL,GAAc,CADrB;;AAEA,aAAO0D,EAAE,GAAGC,EAAZ,EAAgB;AACdvC,QAAAA,YAAY,GAAGqC,IAAI,CAACC,EAAE,IAAI,CAAP,CAAnB;AACA,YAAIE,IAAI,GAAG5F,OAAO,CAACoD,YAAD,CAAlB;;AACA,YAAI5D,EAAE,CAACY,IAAH,CAAQyF,cAAR,CAAuBD,IAAvB,EAA6BpG,EAAE,CAACsG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9C,cAAIC,KAAK,GAAGxG,EAAE,CAACY,IAAH,CAAQC,WAAR,CAAoB+C,YAApB,CAAZ;AAAA,cACE6B,SAAS,GAAGtE,KAAK,GAAGqF,KADtB;AAAA,cAEEC,WAAW,GAAGV,YAAY,IAAIK,IAAI,CAACM,OAAL,KAAiBC,SAFjD;AAGArF,UAAAA,GAAG,CAACb,MAAJ,GAAa2F,IAAb;AACA9E,UAAAA,GAAG,CAACX,UAAJ,GAAiBD,WAAW,GAAG8F,KAA/B;AACAlF,UAAAA,GAAG,CAACP,aAAJ,GAAoBD,cAAc,GAAG,GAAjB,GAAuBd,EAAE,CAACY,IAAH,CAAQgG,cAAR,CAAuBhD,YAAvB,CAA3C;AACAtC,UAAAA,GAAG,CAACmD,SAAJ,GAAgBzE,EAAE,CAACY,IAAH,CAAQiG,OAAR,CAAgB7G,EAAE,CAACyE,SAAnB,EAA8Bb,YAA9B,EAA4C5D,EAAE,CAACiB,IAAH,CAAQ4D,YAApD,CAAhB;AACAvD,UAAAA,GAAG,CAACoE,WAAJ,CAAgB9D,QAAhB,IAA4B5B,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBH,YAAvB,CAA5B;AACA,cAAI+B,KAAK,GAAG3F,EAAE,CAAC4F,QAAH,CAAYtE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC2B,MAAJ,GAAaD,cAAb;;AACA,cAAIhD,EAAE,CAACY,IAAH,CAAQiF,aAAR,CAAsBF,KAAtB,EAA6B9D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C8D,YAAAA,KAAK,GAAG3F,EAAE,CAACY,IAAH,CAAQkF,UAAR,CAAmBH,KAAnB,EAA0B9D,SAA1B,EAAqC4D,SAArC,CAAR;AACA,gBAAIqB,QAAQ,GAAGrB,SAAf;AACD,WAHD,MAGO;AACL,gBAAIqB,QAAQ,GAAGjF,SAAf;AACA1B,YAAAA,GAAG,IAAI,UAAW0B,SAAX,GAAwB,KAAxB,GAAiC4D,SAAjC,GAA8C,IAArD;AACD;;AACD,cAAIgB,WAAJ,EAAiB;AACftG,YAAAA,GAAG,IAAI,MAAOwF,KAAP,GAAgB,GAAvB;AACD,WAFD,MAEO;AACL,gBAAIrC,aAAa,IAAIA,aAAa,CAACM,YAAD,CAAlC,EAAkD;AAChDzD,cAAAA,GAAG,IAAI,WAAY2G,QAAZ,GAAwB,iBAA/B;;AACA,kBAAIhE,cAAJ,EAAoB;AAClB3C,gBAAAA,GAAG,IAAI,gDAAiDgB,KAAjD,GAA0D,MAA1D,GAAoEnB,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBnD,YAArB,CAApE,GAA0G,MAAjH;AACD;;AACDzD,cAAAA,GAAG,IAAI,SAAUsB,UAAV,GAAwB,YAA/B;AACA,kBAAI+C,iBAAiB,GAAGxE,EAAE,CAACyE,SAA3B;AAAA,kBACEK,kBAAkB,GAAGhE,cADvB;AAAA,kBAEEkG,gBAAgB,GAAGhH,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBnD,YAArB,CAFrB;;AAGA,kBAAI5D,EAAE,CAACiB,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClC3E,gBAAAA,EAAE,CAACyE,SAAH,GAAezE,EAAE,CAACY,IAAH,CAAQiG,OAAR,CAAgBrC,iBAAhB,EAAmCZ,YAAnC,EAAiD5D,EAAE,CAACiB,IAAH,CAAQ4D,YAAzD,CAAf;AACD;;AACD/D,cAAAA,cAAc,GAAGd,EAAE,CAACe,aAAH,GAAmB,WAApC;AACA,kBAAIgE,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB7E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIH,EAAE,CAACiF,YAAH,KAAoB,KAAxB,EAA+B;AAC7B9E,gBAAAA,GAAG,IAAI,mBAAoB,UAApB,GAAkC,sCAAlC,GAA4EH,EAAE,CAACyE,SAA/E,GAA4F,iBAA5F,GAAiHzE,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBjD,cAAvB,CAAjH,GAA2J,kCAA3J,GAAiMkG,gBAAjM,GAAqN,OAA5N;;AACA,oBAAIhH,EAAE,CAACiB,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B/E,kBAAAA,GAAG,IAAI,gBAAP;;AACA,sBAAIH,EAAE,CAACiB,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClCxE,oBAAAA,GAAG,IAAI,wBAAP;AACD,mBAFD,MAEO;AACLA,oBAAAA,GAAG,IAAI,uCAAwC6G,gBAAxC,GAA4D,MAAnE;AACD;;AACD7G,kBAAAA,GAAG,IAAI,KAAP;AACD;;AACD,oBAAIH,EAAE,CAACiB,IAAH,CAAQkE,OAAZ,EAAqB;AACnBhF,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFV,EAAE,CAACW,UAAxF,GAAsG,WAAtG,GAAqHQ,KAArH,GAA8H,GAArI;AACD;;AACDhB,gBAAAA,GAAG,IAAI,KAAP;AACD,eAfD,MAeO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAIiF,KAAK,GAAGjF,GAAZ;AACAA,cAAAA,GAAG,GAAG4E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAACrF,EAAE,CAACsF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIhB,EAAE,CAACuF,KAAP,EAAc;AACZpF,kBAAAA,GAAG,IAAI,iCAAkCiF,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACLjF,kBAAAA,GAAG,IAAI,yBAA0BiF,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACLjF,gBAAAA,GAAG,IAAI,gBAAiBiF,KAAjB,GAA0B,8EAAjC;AACD;;AACDtE,cAAAA,cAAc,GAAGgE,kBAAjB;AACA9E,cAAAA,EAAE,CAACyE,SAAH,GAAeD,iBAAf;AACArE,cAAAA,GAAG,IAAI,YAAP;AACD,aAhDD,MAgDO;AACL,kBAAIa,aAAJ,EAAmB;AACjBb,gBAAAA,GAAG,IAAI,WAAY2G,QAAZ,GAAwB,iBAA/B;;AACA,oBAAIhE,cAAJ,EAAoB;AAClB3C,kBAAAA,GAAG,IAAI,gDAAiDgB,KAAjD,GAA0D,MAA1D,GAAoEnB,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBnD,YAArB,CAApE,GAA0G,MAAjH;AACD;;AACDzD,gBAAAA,GAAG,IAAI,SAAUsB,UAAV,GAAwB,oBAA/B;AACD,eAND,MAMO;AACLtB,gBAAAA,GAAG,IAAI,UAAW2G,QAAX,GAAuB,iBAA9B;;AACA,oBAAIhE,cAAJ,EAAoB;AAClB3C,kBAAAA,GAAG,IAAI,gDAAiDgB,KAAjD,GAA0D,MAA1D,GAAoEnB,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBnD,YAArB,CAApE,GAA0G,MAAjH;AACD;;AACDzD,gBAAAA,GAAG,IAAI,OAAP;AACD;AACF;;AACDA,YAAAA,GAAG,IAAI,MAAOwF,KAAP,GAAgB,KAAvB;AACD;AACF;;AACD,YAAI3E,aAAJ,EAAmB;AACjBb,UAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,UAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;;AACD,MAAIY,cAAc,CAACI,MAAnB,EAA2B;AACzB,QAAIyE,IAAI,GAAG7E,cAAX;;AACA,QAAI6E,IAAJ,EAAU;AACR,UAAIhD,UAAJ;AAAA,UAAgBiD,EAAE,GAAG,CAAC,CAAtB;AAAA,UACEC,EAAE,GAAGF,IAAI,CAACzE,MAAL,GAAc,CADrB;;AAEA,aAAO0E,EAAE,GAAGC,EAAZ,EAAgB;AACdlD,QAAAA,UAAU,GAAGgD,IAAI,CAACC,EAAE,IAAI,CAAP,CAAjB;AACA,YAAId,IAAI,GAAGlE,YAAY,CAAC+B,UAAD,CAAvB;;AACA,YAAIjE,EAAE,CAACY,IAAH,CAAQyF,cAAR,CAAuBD,IAAvB,EAA6BpG,EAAE,CAACsG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9CjF,UAAAA,GAAG,CAACb,MAAJ,GAAa2F,IAAb;AACA9E,UAAAA,GAAG,CAACX,UAAJ,GAAiBX,EAAE,CAACW,UAAH,GAAgB,oBAAhB,GAAuCX,EAAE,CAACY,IAAH,CAAQC,WAAR,CAAoBoD,UAApB,CAAxD;AACA3C,UAAAA,GAAG,CAACP,aAAJ,GAAoBf,EAAE,CAACe,aAAH,GAAmB,qBAAnB,GAA2Cf,EAAE,CAACY,IAAH,CAAQgG,cAAR,CAAuB3C,UAAvB,CAA/D;;AACA,cAAInB,cAAJ,EAAoB;AAClB3C,YAAAA,GAAG,IAAI,MAAO2B,eAAP,GAA0B,KAA1B,GAAmCA,eAAnC,GAAsD,kBAAtD,GAA4EX,KAA5E,GAAqF,cAArF,GAAuGQ,IAAvG,GAA+G,MAA/G,GAAyHA,IAAzH,GAAiI,GAAjI,GAAwIG,eAAxI,GAA2J,WAA3J,GAA0KH,IAA1K,GAAkL,YAAlL,GAAkMD,IAAlM,GAA0M,KAA1M,GAAmNI,eAAnN,GAAsO,GAAtO,GAA6OH,IAA7O,GAAqP,KAA5P;AACD,WAFD,MAEO;AACLxB,YAAAA,GAAG,IAAI,eAAgBuB,IAAhB,GAAwB,MAAxB,GAAkCP,KAAlC,GAA2C,MAAlD;AACD;;AACDhB,UAAAA,GAAG,IAAI,UAAWH,EAAE,CAACoE,UAAH,CAAcH,UAAd,CAAX,GAAwC,QAAxC,GAAoDvC,IAApD,GAA4D,OAAnE;AACAJ,UAAAA,GAAG,CAACmD,SAAJ,GAAgBzE,EAAE,CAACY,IAAH,CAAQgE,WAAR,CAAoB5E,EAAE,CAACyE,SAAvB,EAAkC/C,IAAlC,EAAwC1B,EAAE,CAACiB,IAAH,CAAQ4D,YAAhD,CAAhB;AACA,cAAIY,SAAS,GAAGtE,KAAK,GAAG,GAAR,GAAcO,IAAd,GAAqB,GAArC;AACAJ,UAAAA,GAAG,CAACoE,WAAJ,CAAgB9D,QAAhB,IAA4BF,IAA5B;AACA,cAAIiE,KAAK,GAAG3F,EAAE,CAAC4F,QAAH,CAAYtE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC2B,MAAJ,GAAaD,cAAb;;AACA,cAAIhD,EAAE,CAACY,IAAH,CAAQiF,aAAR,CAAsBF,KAAtB,EAA6B9D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C1B,YAAAA,GAAG,IAAI,MAAOH,EAAE,CAACY,IAAH,CAAQkF,UAAR,CAAmBH,KAAnB,EAA0B9D,SAA1B,EAAqC4D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLtF,YAAAA,GAAG,IAAI,UAAW0B,SAAX,GAAwB,KAAxB,GAAiC4D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,cAAI3E,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,KAAP;;AACA,cAAIa,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,MAAP;;AACA,cAAIa,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,YAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;AACF;;AACD,MAAIxB,EAAE,CAACiB,IAAH,CAAQuC,aAAR,IAAyBE,eAAe,CAAClB,MAA7C,EAAqD;AACnD,QAAI4E,IAAI,GAAG1D,eAAX;;AACA,QAAI0D,IAAJ,EAAU;AACR,UAAI9C,WAAJ;AAAA,UAAiB+C,EAAE,GAAG,CAAC,CAAvB;AAAA,UACEC,EAAE,GAAGF,IAAI,CAAC5E,MAAL,GAAc,CADrB;;AAEA,aAAO6E,EAAE,GAAGC,EAAZ,EAAgB;AACdhD,QAAAA,WAAW,GAAG8C,IAAI,CAACC,EAAE,IAAI,CAAP,CAAlB;AACA,YAAIE,SAAS,GAAG9D,aAAa,CAACa,WAAD,CAA7B;AAAA,YACE8B,IAAI,GAAGmB,SAAS,CAAC9G,MADnB;;AAEA,YAAIT,EAAE,CAACY,IAAH,CAAQyF,cAAR,CAAuBD,IAAvB,EAA6BpG,EAAE,CAACsG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9CjF,UAAAA,GAAG,CAACb,MAAJ,GAAa2F,IAAb;AACA9E,UAAAA,GAAG,CAACX,UAAJ,GAAiBX,EAAE,CAACW,UAAH,GAAgB,gBAAhB,GAAmCX,EAAE,CAACY,IAAH,CAAQC,WAAR,CAAoByD,WAApB,CAAnC,GAAsE,SAAvF;AACAhD,UAAAA,GAAG,CAACP,aAAJ,GAAoBf,EAAE,CAACe,aAAH,GAAmB,iBAAnB,GAAuCf,EAAE,CAACY,IAAH,CAAQgG,cAAR,CAAuBtC,WAAvB,CAAvC,GAA6E,SAAjG;AACAnE,UAAAA,GAAG,IAAI,qBAAsBC,IAAtB,GAA8B,SAArC;;AACA,cAAI0C,cAAJ,EAAoB;AAClB3C,YAAAA,GAAG,IAAI,MAAO2B,eAAP,GAA0B,KAA1B,GAAmCA,eAAnC,GAAsD,kBAAtD,GAA4EX,KAA5E,GAAqF,cAArF,GAAuGQ,IAAvG,GAA+G,MAA/G,GAAyHA,IAAzH,GAAiI,GAAjI,GAAwIG,eAAxI,GAA2J,WAA3J,GAA0KH,IAA1K,GAAkL,YAAlL,GAAkMD,IAAlM,GAA0M,KAA1M,GAAmNI,eAAnN,GAAsO,GAAtO,GAA6OH,IAA7O,GAAqP,KAA5P;AACD,WAFD,MAEO;AACLxB,YAAAA,GAAG,IAAI,eAAgBuB,IAAhB,GAAwB,MAAxB,GAAkCP,KAAlC,GAA2C,MAAlD;AACD;;AACDhB,UAAAA,GAAG,IAAI,UAAWH,EAAE,CAACoE,UAAH,CAAcE,WAAd,CAAX,GAAyC,QAAzC,GAAqD5C,IAArD,GAA6D,kBAA7D,GAAmFtB,IAAnF,GAA2F,MAAlG;AACAkB,UAAAA,GAAG,CAACmD,SAAJ,GAAgBzE,EAAE,CAACY,IAAH,CAAQgE,WAAR,CAAoB5E,EAAE,CAACyE,SAAvB,EAAkC/C,IAAlC,EAAwC1B,EAAE,CAACiB,IAAH,CAAQ4D,YAAhD,CAAhB;AACA,cAAIY,SAAS,GAAGtE,KAAK,GAAG,GAAR,GAAcO,IAAd,GAAqB,GAArC;AACAJ,UAAAA,GAAG,CAACoE,WAAJ,CAAgB9D,QAAhB,IAA4BF,IAA5B;AACA,cAAIiE,KAAK,GAAG3F,EAAE,CAAC4F,QAAH,CAAYtE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC2B,MAAJ,GAAaD,cAAb;;AACA,cAAIhD,EAAE,CAACY,IAAH,CAAQiF,aAAR,CAAsBF,KAAtB,EAA6B9D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C1B,YAAAA,GAAG,IAAI,MAAOH,EAAE,CAACY,IAAH,CAAQkF,UAAR,CAAmBH,KAAnB,EAA0B9D,SAA1B,EAAqC4D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLtF,YAAAA,GAAG,IAAI,UAAW0B,SAAX,GAAwB,KAAxB,GAAiC4D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,cAAI3E,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,KAAP;;AACA,cAAIa,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,MAAP;;AACA,cAAIa,aAAJ,EAAmB;AACjBb,YAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,YAAAA,cAAc,IAAI,GAAlB;AACD;;AACD,cAAIgG,MAAM,GAAGD,SAAS,CAACE,OAAvB;AAAA,cACEC,MAAM,GAAGH,SAAS,CAACI,OADrB;;AAEA,cAAIH,MAAM,KAAKb,SAAX,IAAwBe,MAAM,KAAKf,SAAvC,EAAkD;AAChDxG,YAAAA,GAAG,IAAI,UAAWiB,MAAX,GAAqB,WAA5B;AACA,gBAAI0D,kBAAkB,GAAGhE,cAAzB;;AACA,gBAAI0G,MAAM,KAAKb,SAAf,EAA0B;AACxB,kBAAIiB,MAAM,GAAGJ,MAAb;AAAA,kBACEK,OAAO,GAAG,SADZ;AAAA,kBAEEC,WAAW,GAAG,MAFhB;AAGA3H,cAAAA,GAAG,IAAI,MAAOiB,MAAP,GAAiB,gBAAjB,GAAqChB,IAArC,GAA6C,MAA7C,GAAuDoH,MAAvD,GAAiE,IAAxE;AACA1G,cAAAA,cAAc,GAAGd,EAAE,CAACe,aAAH,GAAmB,wBAApC;AACAZ,cAAAA,GAAG,IAAI,YAAaiB,MAAb,GAAuB,QAA9B;AACA,kBAAI2D,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB7E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIH,EAAE,CAACiF,YAAH,KAAoB,KAAxB,EAA+B;AAC7B9E,gBAAAA,GAAG,IAAI,mBAAoB,eAApB,GAAuC,sCAAvC,GAAiFH,EAAE,CAACyE,SAApF,GAAiG,iBAAjG,GAAsHzE,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBjD,cAAvB,CAAtH,GAAgK,yBAAhK,GAA6L+G,OAA7L,GAAwM,aAAxM,GAAyND,MAAzN,GAAmO,eAAnO,GAAsP5H,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBzC,WAArB,CAAtP,GAA2R,OAAlS;;AACA,oBAAItE,EAAE,CAACiB,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B/E,kBAAAA,GAAG,IAAI,mCAAoC2H,WAApC,GAAmD,QAAnD,GAA+DF,MAA/D,GAAyE,gCAAzE,GAA6G5H,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBzC,WAArB,CAA7G,GAAkJ,MAAzJ;AACD;;AACD,oBAAItE,EAAE,CAACiB,IAAH,CAAQkE,OAAZ,EAAqB;AACnBhF,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFV,EAAE,CAACW,UAAxF,GAAsG,WAAtG,GAAqHQ,KAArH,GAA8H,GAArI;AACD;;AACDhB,gBAAAA,GAAG,IAAI,KAAP;AACD,eATD,MASO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAIiF,KAAK,GAAGjF,GAAZ;AACAA,cAAAA,GAAG,GAAG4E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAACrF,EAAE,CAACsF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIhB,EAAE,CAACuF,KAAP,EAAc;AACZpF,kBAAAA,GAAG,IAAI,iCAAkCiF,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACLjF,kBAAAA,GAAG,IAAI,yBAA0BiF,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACLjF,gBAAAA,GAAG,IAAI,gBAAiBiF,KAAjB,GAA0B,8EAAjC;AACD;;AACDjF,cAAAA,GAAG,IAAI,KAAP;;AACA,kBAAIuH,MAAM,KAAKf,SAAf,EAA0B;AACxBxG,gBAAAA,GAAG,IAAI,QAAP;AACD;AACF;;AACD,gBAAIuH,MAAM,KAAKf,SAAf,EAA0B;AACxB,kBAAIiB,MAAM,GAAGF,MAAb;AAAA,kBACEG,OAAO,GAAG,SADZ;AAAA,kBAEEC,WAAW,GAAG,MAFhB;AAGA3H,cAAAA,GAAG,IAAI,MAAOiB,MAAP,GAAiB,gBAAjB,GAAqChB,IAArC,GAA6C,MAA7C,GAAuDsH,MAAvD,GAAiE,IAAxE;AACA5G,cAAAA,cAAc,GAAGd,EAAE,CAACe,aAAH,GAAmB,wBAApC;AACAZ,cAAAA,GAAG,IAAI,YAAaiB,MAAb,GAAuB,QAA9B;AACA,kBAAI2D,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB7E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIH,EAAE,CAACiF,YAAH,KAAoB,KAAxB,EAA+B;AAC7B9E,gBAAAA,GAAG,IAAI,mBAAoB,eAApB,GAAuC,sCAAvC,GAAiFH,EAAE,CAACyE,SAApF,GAAiG,iBAAjG,GAAsHzE,EAAE,CAACY,IAAH,CAAQmD,cAAR,CAAuBjD,cAAvB,CAAtH,GAAgK,yBAAhK,GAA6L+G,OAA7L,GAAwM,aAAxM,GAAyND,MAAzN,GAAmO,eAAnO,GAAsP5H,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBzC,WAArB,CAAtP,GAA2R,OAAlS;;AACA,oBAAItE,EAAE,CAACiB,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B/E,kBAAAA,GAAG,IAAI,mCAAoC2H,WAApC,GAAmD,QAAnD,GAA+DF,MAA/D,GAAyE,gCAAzE,GAA6G5H,EAAE,CAACY,IAAH,CAAQmG,YAAR,CAAqBzC,WAArB,CAA7G,GAAkJ,MAAzJ;AACD;;AACD,oBAAItE,EAAE,CAACiB,IAAH,CAAQkE,OAAZ,EAAqB;AACnBhF,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFV,EAAE,CAACW,UAAxF,GAAsG,WAAtG,GAAqHQ,KAArH,GAA8H,GAArI;AACD;;AACDhB,gBAAAA,GAAG,IAAI,KAAP;AACD,eATD,MASO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAIiF,KAAK,GAAGjF,GAAZ;AACAA,cAAAA,GAAG,GAAG4E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAACrF,EAAE,CAACsF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIhB,EAAE,CAACuF,KAAP,EAAc;AACZpF,kBAAAA,GAAG,IAAI,iCAAkCiF,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACLjF,kBAAAA,GAAG,IAAI,yBAA0BiF,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACLjF,gBAAAA,GAAG,IAAI,gBAAiBiF,KAAjB,GAA0B,8EAAjC;AACD;;AACDjF,cAAAA,GAAG,IAAI,KAAP;AACD;;AACDW,YAAAA,cAAc,GAAGgE,kBAAjB;;AACA,gBAAI9D,aAAJ,EAAmB;AACjBb,cAAAA,GAAG,IAAI,UAAWiB,MAAX,GAAqB,MAA5B;AACAI,cAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,MAAIR,aAAJ,EAAmB;AACjBb,IAAAA,GAAG,IAAI,MAAOqB,cAAP,GAAyB,OAAzB,GAAoCH,KAApC,GAA6C,eAApD;AACD;;AACDlB,EAAAA,GAAG,GAAGH,EAAE,CAACY,IAAH,CAAQmH,WAAR,CAAoB5H,GAApB,CAAN;AACA,SAAOA,GAAP;AACD,CAldD","sourcesContent":["'use strict';\nmodule.exports = function generate_properties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n    $idx = 'idx' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $dataProperties = 'dataProperties' + $lvl;\n  var $schemaKeys = Object.keys($schema || {}),\n    $pProperties = it.schema.patternProperties || {},\n    $pPropertyKeys = Object.keys($pProperties),\n    $aProperties = it.schema.additionalProperties,\n    $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n    $noAdditional = $aProperties === false,\n    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n    $removeAdditional = it.opts.removeAdditional,\n    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n    $ownProperties = it.opts.ownProperties,\n    $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n  if (it.opts.patternGroups) {\n    var $pgProperties = it.schema.patternGroups || {},\n      $pgPropertyKeys = Object.keys($pgProperties);\n  }\n  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';\n  if ($ownProperties) {\n    out += ' var ' + ($dataProperties) + ' = undefined;';\n  }\n  if ($checkAdditional) {\n    if ($ownProperties) {\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n    } else {\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n    }\n    if ($someProperties) {\n      out += ' var isAdditional' + ($lvl) + ' = !(false ';\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 5) {\n          out += ' || validate.schema' + ($schemaPath) + '[' + ($key) + '] ';\n        } else {\n          var arr1 = $schemaKeys;\n          if (arr1) {\n            var $propertyKey, i1 = -1,\n              l1 = arr1.length - 1;\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';\n            }\n          }\n        }\n      }\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n        if (arr2) {\n          var $pProperty, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      if (it.opts.patternGroups && $pgPropertyKeys.length) {\n        var arr3 = $pgPropertyKeys;\n        if (arr3) {\n          var $pgProperty, $i = -1,\n            l3 = arr3.length - 1;\n          while ($i < l3) {\n            $pgProperty = arr3[$i += 1];\n            out += ' || ' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      out += ' ); if (isAdditional' + ($lvl) + ') { ';\n    }\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n        } else {\n          out += ' ' + ($nextValid) + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = ''; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ('additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\'' + ($additionalProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'should NOT have additional properties\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + (__err) + ']); ';\n            } else {\n              out += ' validate.errors = [' + (__err) + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n          $errSchemaPath = $currErrSchemaPath;\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + ($errs) + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n        }\n      }\n      it.errorPath = $currentErrorPath;\n    }\n    if ($someProperties) {\n      out += ' } ';\n    }\n    out += ' }  ';\n    if ($breakOnError) {\n      out += ' if (' + ($nextValid) + ') { ';\n      $closingBraces += '}';\n    }\n  }\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n  if ($schemaKeys.length) {\n    var arr4 = $schemaKeys;\n    if (arr4) {\n      var $propertyKey, i4 = -1,\n        l4 = arr4.length - 1;\n      while (i4 < l4) {\n        $propertyKey = arr4[i4 += 1];\n        var $sch = $schema[$propertyKey];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n            $passData = $data + $prop,\n            $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';\n          }\n          if ($hasDefault) {\n            out += ' ' + ($code) + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if ( ' + ($useData) + ' === undefined ';\n              if ($ownProperties) {\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n              }\n              out += ') { ' + ($nextValid) + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                $currErrSchemaPath = $errSchemaPath,\n                $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if ( ' + ($useData) + ' === undefined ';\n                if ($ownProperties) {\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ') { ' + ($nextValid) + ' = true; } else { ';\n              } else {\n                out += ' if (' + ($useData) + ' !== undefined ';\n                if ($ownProperties) {\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ' ) { ';\n              }\n            }\n            out += ' ' + ($code) + ' } ';\n          }\n        }\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($pPropertyKeys.length) {\n    var arr5 = $pPropertyKeys;\n    if (arr5) {\n      var $pProperty, i5 = -1,\n        l5 = arr5.length - 1;\n      while (i5 < l5) {\n        $pProperty = arr5[i5 += 1];\n        var $sch = $pProperties[$pProperty];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n          if ($ownProperties) {\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n          } else {\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n          }\n          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n  }\n  if (it.opts.patternGroups && $pgPropertyKeys.length) {\n    var arr6 = $pgPropertyKeys;\n    if (arr6) {\n      var $pgProperty, i6 = -1,\n        l6 = arr6.length - 1;\n      while (i6 < l6) {\n        $pgProperty = arr6[i6 += 1];\n        var $pgSchema = $pgProperties[$pgProperty],\n          $sch = $pgSchema.schema;\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';\n          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';\n          out += ' var pgPropCount' + ($lvl) + ' = 0;  ';\n          if ($ownProperties) {\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n          } else {\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n          }\n          out += ' if (' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ')) { pgPropCount' + ($lvl) + '++; ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n          var $pgMin = $pgSchema.minimum,\n            $pgMax = $pgSchema.maximum;\n          if ($pgMin !== undefined || $pgMax !== undefined) {\n            out += ' var ' + ($valid) + ' = true; ';\n            var $currErrSchemaPath = $errSchemaPath;\n            if ($pgMin !== undefined) {\n              var $limit = $pgMin,\n                $reason = 'minimum',\n                $moreOrLess = 'less';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' >= ' + ($pgMin) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n              if ($pgMax !== undefined) {\n                out += ' else ';\n              }\n            }\n            if ($pgMax !== undefined) {\n              var $limit = $pgMax,\n                $reason = 'maximum',\n                $moreOrLess = 'more';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' <= ' + ($pgMax) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n            $errSchemaPath = $currErrSchemaPath;\n            if ($breakOnError) {\n              out += ' if (' + ($valid) + ') { ';\n              $closingBraces += '}';\n            }\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n"]},"metadata":{},"sourceType":"script"}