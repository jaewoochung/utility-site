{"ast":null,"code":"\"use strict\";\n\nvar BaseModel = require('./BaseModel'),\n    Transaction = require('./Transaction'),\n    handleError = require('../errorHandler').handleError,\n    _ = require('lodash'); //##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Address = require('coinbase').model.Address;\n// var myAddress = new Address(client, data, account);\n//```\n// _normally you will get address from `Address` methods on the Account\n// or methods on existing instance of `Address`_\n// - - -\n\n\nfunction Address(client, data, account) {\n  if (!(this instanceof Address)) {\n    return new Address(client, data, account);\n  }\n\n  BaseModel.call(this, client, data);\n\n  if (!account) {\n    throw new Error(\"no account arg\");\n  }\n\n  if (!account.id) {\n    throw new Error(\"account has no id\");\n  }\n\n  this.account = account;\n}\n\nAddress.prototype = Object.create(BaseModel.prototype);\n\nAddress.prototype.getTransactions = function (args, callback) {\n  var opts = {\n    'colName': 'addresses/' + this.id + '/transactions',\n    'ObjFunc': Transaction\n  };\n\n  this.account._getAll(_.assign(args || {}, opts), callback);\n};\n\nmodule.exports = Address;","map":{"version":3,"sources":["/Users/jaewoochung/Documents/github_repositories/dashboard/node_modules/coinbase/lib/model/Address.js"],"names":["BaseModel","require","Transaction","handleError","_","Address","client","data","account","call","Error","id","prototype","Object","create","getTransactions","args","callback","opts","_getAll","assign","module","exports"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAKC,OAAO,CAAC,aAAD,CAAzB;AAAA,IACIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CADzB;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,WAF7C;AAAA,IAGIC,CAAC,GAAaH,OAAO,CAAC,QAAD,CAHzB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASI,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtC,MAAI,EAAE,gBAAgBH,OAAlB,CAAJ,EAAgC;AAC9B,WAAO,IAAIA,OAAJ,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,CAAP;AACD;;AACDR,EAAAA,SAAS,CAACS,IAAV,CAAe,IAAf,EAAqBH,MAArB,EAA6BC,IAA7B;;AACA,MAAI,CAACC,OAAL,EAAc;AAAE,UAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AAAoC;;AACpD,MAAI,CAACF,OAAO,CAACG,EAAb,EAAiB;AAAE,UAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;AAAuC;;AAC1D,OAAKF,OAAL,GAAeA,OAAf;AACD;;AAEDH,OAAO,CAACO,SAAR,GAAoBC,MAAM,CAACC,MAAP,CAAcd,SAAS,CAACY,SAAxB,CAApB;;AAEAP,OAAO,CAACO,SAAR,CAAkBG,eAAlB,GAAoC,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAC3D,MAAIC,IAAI,GAAG;AACT,eAAa,eAAe,KAAKP,EAApB,GAAyB,eAD7B;AAET,eAAaT;AAFJ,GAAX;;AAKA,OAAKM,OAAL,CAAaW,OAAb,CAAqBf,CAAC,CAACgB,MAAF,CAASJ,IAAI,IAAI,EAAjB,EAAqBE,IAArB,CAArB,EAAiDD,QAAjD;AACD,CAPD;;AASAI,MAAM,CAACC,OAAP,GAAiBjB,OAAjB","sourcesContent":["\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    Transaction = require('./Transaction'),\n    handleError = require('../errorHandler').handleError,\n    _           = require('lodash');\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Address = require('coinbase').model.Address;\n// var myAddress = new Address(client, data, account);\n//```\n// _normally you will get address from `Address` methods on the Account\n// or methods on existing instance of `Address`_\n// - - -\n\nfunction Address(client, data, account) {\n  if (!(this instanceof Address)) {\n    return new Address(client, data, account);\n  }\n  BaseModel.call(this, client, data);\n  if (!account) { throw new Error(\"no account arg\"); }\n  if (!account.id) { throw new Error(\"account has no id\"); }\n  this.account = account;\n}\n\nAddress.prototype = Object.create(BaseModel.prototype);\n\nAddress.prototype.getTransactions = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses/' + this.id + '/transactions',\n    'ObjFunc'  : Transaction,\n  };\n\n  this.account._getAll(_.assign(args || {}, opts), callback)\n};\n\nmodule.exports = Address;\n"]},"metadata":{},"sourceType":"script"}